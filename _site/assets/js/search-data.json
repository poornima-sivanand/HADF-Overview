{
  
  "0": {
    "title": "Access Management",
    "content": "Access Management . Archetype: Access Management . What is it? Access management includes the identy verification, and authorization of an individual’s ability to access a system, application or any IT instance. It is a broad concept that encompasses all policies, processes, methodologies and tools to maintain access privileges within an IT environment. It includes administration of accesses, as well as logging of administration and access attempts to facilitate audit. Access management is a class of applications that stands alone, and should be distinguished from “role-based access” to privileged functions within an application. The former is implemented with a class of tool, the latter is an implementation detail within an application that is influenced through standards and guidelines. . Keywords: authentication, authorization, roles, single sign-on (SSO) . What it is not: This is not role-based access, which is the responsibility of an application or system. Role-based access may consume features and capabilities within a similar system that implements access management, but they are not the same thing. . Examples: Azure Active Directory (AD) may be used to control access to systems and networks. Through the use of groups and membership, Azure AD may also be used to restrict access to specific functionality within an application. . Preferred Direction: Focus on a single authoritative source for managing access to Government systems. Delegate the ability to manage access to applications to the owners of those applications. Continue to improve real-time monitoring and alert capabilities. .",
    "url": "http://localhost:4000/docs/DeliverableC/System%20Applications/AccessMgt.html",
    "relUrl": "/docs/DeliverableC/System%20Applications/AccessMgt.html"
  }
  ,"1": {
    "title": "Authentication and Authorization",
    "content": "Giving the right person the right access . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/Authentication&Authorization.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/Authentication&Authorization.html"
  }
  ,"2": {
    "title": "Best Practices",
    "content": "Fail fast but Learn quick . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/BestPractices.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/BestPractices.html"
  }
  ,"3": {
    "title": "Block Storage",
    "content": "Block Storage . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/BlockStorage.html",
    "relUrl": "/docs/DeliverableC/Storage/BlockStorage.html"
  }
  ,"4": {
    "title": "Business Applications",
    "content": "Business Applications .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/BusinessApplications.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/BusinessApplications.html"
  }
  ,"5": {
    "title": "CI/CD Practices",
    "content": "Continuous Integrating and Continuously Delivering your changes . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/CI&CDPractices.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/CI&CDPractices.html"
  }
  ,"6": {
    "title": "Client Relationship Management",
    "content": "Customer Relationship Management . Archetype: Customer Relationship Management . What is it? Customer relationship management (CRM) is the management of an organization’s interaction with current and potential customers. Customers in a public sector context include citizens, businesses, and other stakeholders. Some defining features of a CRM include a centralized contact list and correspondence tracking. A CRM may include workflow capabilities, analytical features to measure customer satisfaction, lead potential, and integrations with call centre applications, and other communication systems such as email. . What it is not: We must distinguish between the need for a CRM solution, and building other systems upon a platform that is (or was) at its core, a CRM system, simply because they are related systems. Although “case management” might be (arguably) seen by some as a derivative of CRM, for this exercise, one is not the other. A “CRM platform” is not necessarily CRM, though it does enable CRM capabilities. . Examples: Out-of-the-box Microsoft Dynamics could be classified as a CRM system, as could SalesForce. However, given the risk and associated cost, of building dependencies upon a platform such as (SalesForce) force.com or upon Dynamics (the PaaS), for this exercise, we must differentiate between them. . Preferred Direction: Distinguish CRM from the platforms upon which they’re built. Determine guidelines for the use of both, and provide advisory services for implementation of both. Guard against the accidental overlap – build upon a CRM platform must be an explicit and fully-informed decision, to guard against vendor product and service lock-in, and to optimize exit costs. . For discussion: Should “lower-level” capabilities like the ones mentioned above (mail, analytics, workflow) be in this list, or a separate list, or neither? .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/CRM.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/CRM.html"
  }
  ,"7": {
    "title": "Call Centre",
    "content": "Call Centre . Archetype: Call Centre . What is it? A call centre is a (logical, and may be one or more locations representing a) collection of phone lines, usually staffed, used for receiving and/or transmitting a high volume of enquiries by telephone. A Call Centre can be supplemented with an Interactive Voice Response unit that may collect statistics and route calls. A Call Centre is often supported by a “tracking” system that helps steward a call or incident to some kind of resolution. . What it is not : Many ministries have a tracking function for ministerial correspondence. This does not necessarily constitute a call centre. The tracking system mentioned above, that may support a Call Centre, is a logically separate entity, not in scope of this archetype. . Keywords: Interactive Voice Response (IVR), contact centre, call centre, support line . Examples of Call Centre: 7-7000 Support Centre, Enquiry BC . Preferred Direction: To aggregate and document enterprise-wide need for a call centre capability, and provide a short list of recommended approaches. Those approaches may include a short list of vendors providing services and/or tools in support. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/CallCentre.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/CallCentre.html"
  }
  ,"8": {
    "title": "Case Management",
    "content": "Case Management . Archetype: Case Management . What is it? Case management is the coordination of services on behalf of an individual within settings such as health care, nursing, rehabilitation, social work, disability insurance, employment, and law. However, in the legal context, case management may refer to the collection and management of material (evidence, argument for both sides, judgements, appeals) specific to a particular matter between two individuals (one of which may be The Crown.) The need to secure personal information is generally higher in a case management context. . What it is not: In this context, cases are more focused in individuals than technology, so an IT Trouble Ticket system would not be considered “case management”. It is not Customer Relationship Management (CRM), though case management systems may be based upon CRM. There are considerably more marketing capabilities embodied in CRM, used to convince “leads” of a need for a product or service. There is often considerably more “document management” and “records management” used within case management. . Examples of Case Management: Delivery and tracking of services to a specific individual, such as a child in care, a homeless individual, and patient receiving care for a specific illness. . Preferred Direction: To aggregate need, recognize high-level use cases, and recomment approaches to address the need. There may also be opportuniteis to decompose larger case management requirements, so that they may be addressed with smaller contracts or services or solutions. . For discussion: How does case management influence the case collective? That is, upon “completion” of a case, it may become part of a larger collection available for the (public) consumption (open data). What does a common service look like in this context? .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/CaseManagement.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/CaseManagement.html"
  }
  ,"9": {
    "title": "Cloud Native Principles",
    "content": "Cloud Native Application . What is a Cloud Native Application . Modernizing application architectures and moving it to the cloud requires that your application is cloud native or a 12-factor application. Being cloud native helps minimize costs and improve agility, resilience, scalability and high availability. The twelve factors that define a cloud native application are listed below: . Every application should have its own code base in a version control system. Cloud Native advocates a single repository, multiple deployments to different environments. . | The application being deployed to will have certain dependencies such as external libraries. These dependencies need to be isolated from the code but needs to be maintained along with code. No assumption should be made that the environment where you deploy your application will contain these dependencies pre-configured and in case your server fails, or you need to migrate, your deployment to a new environment should contain all dependencies required for your application to work. . | Configuration is environment specific items such as database connection strings, usernames, passwords, ssl certificates, ssh keys, environment specific configuration files etc. These configurations should be isolated from code and not stored in the code base. They should be stored securely and fetched during runtime. . | Your application will talk to many services such as database, messaging services, email services, caching services etc. Irrespective of where these services are hosted/running, your application should be able to connect to them using a single endpoint (url with/without credentials). Your application should not need to know where these services are running. . | The process of packaging your code(build), deploying or releasing the code in different environments and running the application should be isolated from each other and this process should be automated. Ideally, the code should be built once and deployed across multiple environments. . | Ideally the application should be stateless and the processes within the application don’t share anything with each other implying that there will be no information/log cached in the memory on in the disk for a future request. Anything that needs to persist is stored in the database. . | The application should bind its services to ports and listen on those ports to serve requests. It should not become necessary to rely on the runtime injection of a webservice. . | To ensure scalability and high availability, the application should be deployed across multiple instances/regions/availability zones instead of increasing the capacity of one instance where the application is deployed. The application should also be split into multiple smaller services. . | An application should have minimal start up time, should be able to gracefully shutdown at minimal notice and should have the ability to recover quickly from sudden failures. . | The build and release to different environments should happen over multiple stages of an automated pipeline. The various application deployment environments and the process for deployments should be as similar to each other as possible. The time gap between development and production should be reduced to hours/few days from months. The changes/new features should be kept small and the deployments should be more frequent. . | It is important to configuring logging for the application as well as the backend pieces such as the database. Logs help developers understand and debug reasons for failures as well as predict and fix future failures. Logging mechanisms should be configured such that the information is output as a continuous stream and published using appropriate tools. Logs should be continuously rotated and archived using automation. . | Applications would require one-off processes such as batch scripts and database migrations. These processes should follow the same standards as the application, they should be in version control, and also follow the same deployment process along an automated pipeline through similar stages. . | What would happen if an application that doesn’t follow the 12 factor rules is deployed to cloud? . What if there is no code base in a version control system? . If there is no version control system, in a situation in which you deploy a new version and it fails, it would be difficult to revert back to a previous version as well there would be no tool using which your developers would be able to continuously integrate their changes. A distribute version control system like Git (Bitbucket, GitHub, GitLab) is preferred over a centralized version control system such as Subversion (or SVN), to enable developers to have their own local copy of the repository, work simultaneously and integrate the components they work on, with ease. . A centralized version control in contrast would place locks on files being edited and changes can only be submitted one at a time. Git also provides functionality to easily incorporate DevOps practices and add automation. . There should also be one code base for each application or for each application component (microservice) to ensure they are all properly versioned separately. . | What if the application dependencies are not maintained along with the code base? . It is extremely important to isolate and maintain/declare the application dependencies along with the code base, for instance, you might be deploying to a new environment which doesn’t contain the libraries/packages your application needs due to which your application will fail to load. . Therefore, fetching these dependencies and packaging them along with your application will help you deploy your application to any platform and can also be migrated easily without having the need to preconfigure the environment you deploy to. . | Why should the configuration items be separated from the codebase and fetched during runtime? . Configuration items include passwords, ssh keys, ssl certificates, database connection strings etc. These are generally environment specific, they are highly sensitive and/or might change frequently. It is therefore essential to store them separate from the code base which is accessed by multiple people and fetched at run time. . By parameterizing your code base and making sure there are no environment specific configurations within your code base, it becomes flexible to run your code in any environment and can be easily migrated to a different environment when needed. This also helps restrict data and allow developers to know only what they need to know. . | Why should the application be agnostic of where the backing services are hosted? . If your application is aware and relies on where your database, messaging, or any other backing service is running, if there is a failure in any of these backing services and there is a need to spin up new servers, the application would need to be changed significantly. If the application is not aware of where these services are hosted and connects to these services using a url and credentials, even if a new instance where these services are hosted is spun up or if these services are migrated, there will be minimal/no impact on the application. . | Why should the build, release and run processes be separated and automated? . Separating the build process from the release and run process ensures, changes are not made during runtime. If changes are made during runtime, there is a chance that these changes might not be incorporated the next time the application is deployed or when the instance restarts. The developer puts in all the changes in the code base, creates a portable build artifact during the build stage which is released and run across multiple environments. This will also help setup appropriate gates prior to release and run in each environment to include quality assurance and user acceptance. . | What would happen if an application is stateful? . If you have multiple instances across which the application load is balanced, and if your application is stateful, if one of the instance fail due to any reason and the workloads on that instance switch over to another, it could result in failure or loss of information since the previous state would be lost. . Therefore, it is recommended practise to ensure that your application is stateless. . | What is the need to configure port binding? . Port binding ensures that each micro service within the application is self-contained with ports they serve stored as config enabling them to talk each other using the specified ports. . | Why do we need to stop scaling vertically and start scaling applications horizontally? . Vertical scaling also known as scaling-up, implies adding more computation power (CPU,RAM) to the instance/server on which the application is deployed to meet the growing demand. . Horizontal scaling, also known as scaling-out, on the other hand implies adding more instances or more application deployments into the pool of resources. . The major disadvantage of scaling-up or vertical scaling is that, you impose on yourself the need to keep adding resources as the demand grows and there will be a limit up to which this can be added. Adding more resources or using resource intensive machines on the cloud will prove to be more expensive and these resources might be under-utilized when the demand is less. Also, if the server goes down, the application goes down along with. . In contrast, if horizontal scaling is used, you can use minimal resource configuration, thereby paying a lower cost, but investing in multiple instances of the same type. By utilizing features provided by various cloud providers, you can host the application on instances spread across multiple regions, thereby ensuring, even if one region is down, your application remains accessible via the other instances that are up. Using autoscaling options, you can easily set the threshold and decide when and how many instances you need at a particular instance of time based on the demand. . | Why is application disposability important? . It is highly important to make your environment disposable to ensure its fault tolerant. If your application or the instance on which your application is hosted goes down, it should be easy enough to bring it up within minimal time. This would imply that application, the infrastructure, and other components such as storage, network and database should all be stored in the form of code from which they can be recovered in case of any accidental deletion or unforeseen failures. . Similarly, when processes terminate, they should finish their current request, refuse any incoming request, and then terminate. . | What would happen if the development and production environments are not similar to each other? . If there is parity between the development and production environments, there is possibility of incompatibility and what might seem to work in a developer’s local environment or in the development or staging environment might fail when it is deployed and released to production. By ensuring all environments are similar to each other and kept as close to production as possible, it would be easier for the developer to develop compatible code and debug issues in the earlier stages. . This also implies making sure that the deployment processes are simple, are a single command line and there are transient production-like environments configured using code so that developers can deploy locally and debug their changes. It is also important to ensure your automation is not dependent/specific to any tool. It should be able to work from any environment. . This would help in building a reusable, fully automated, portable continuous delivery pipeline. . | What happens if logs are not configured? . If your application logs are not configured extensively, it will difficult to determine the root cause in case of any failures. The logs should be stored within a persistent storage outside the easily destructible cloud instances to ensure they are available all the time. By storing logs in files of specific formats, monitoring and visualization tools can be used to parse these logs and raise alerts when something goes wrong or even predict if something could go wrong within your system. . | What is the importance of treating one-off processes just like application code? . It is important to treat one-off processes such as batch jobs and database migrations follow the same standards as the application, they should be in version control, and also follow the same deployment process along an automated pipeline through similar stages. . For instance, if database migrations are version controlled and scripts migrated via an automated pipeline using tools such as Liquibase, Flyway DB etc., it will help to make the migrations repeatable. These tools manage the versions using a changelog and only apply changes that have not been applied. This will help applying small changes faster and more frequently and also enable provisions to add recovery scripts. . |",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/CloudNativePrinciples.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/CloudNativePrinciples.html"
  }
  ,"10": {
    "title": "Code Base",
    "content": "How important is an application Code Base? . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/CodeBase.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/CodeBase.html"
  }
  ,"11": {
    "title": "Cold Data Storage",
    "content": "Cold Data Storage . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/ColdDataStorage.html",
    "relUrl": "/docs/DeliverableC/Storage/ColdDataStorage.html"
  }
  ,"12": {
    "title": "Compute",
    "content": "Compute .",
    "url": "http://localhost:4000/docs/DeliverableC/Compute/Compute.html",
    "relUrl": "/docs/DeliverableC/Compute/Compute.html"
  }
  ,"13": {
    "title": "Containers",
    "content": "Containers . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Compute/Containers.html",
    "relUrl": "/docs/DeliverableC/Compute/Containers.html"
  }
  ,"14": {
    "title": "Content Management",
    "content": "Content Management . Archetype: Content Management . What is it? A content management system (CMS) is a software application that can be used to manage the creation and modification of digital content. More specific types of CMS might be enterprise content management, web content management, and Digital Asset Management. . What it is not: Project management/tracking maybe seen by some as “content management”, and collaboration tools may involve management of content, but neither are content management systems. . Keywords: portal, knowledge base, wiki . Examples of Content Management: A CMS typically has two major components: an administrative interface that allows a content owner to add, modify, and remove content, and a delivery mechanism - often seen as “publishing” - that makes the content available to content consumers. CMS Lite is considered a CMS. The use of Drupal to produce our @Work site, yields a similar type of result, but is not in itself, a CMS. . Preferred Direction: Define the capability, aggregate the need across the enterprise, recognize high-level use cases, and recommend approaches to address the use cases. . For discussion: Are we saying here, that an acceptable implementation of this archetype must fully support records management legislation and CIRMO guidance? .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/ContentManagement.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/ContentManagement.html"
  }
  ,"15": {
    "title": "Data Warehouse",
    "content": "Data Warehouse . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/DataWarehouse.html",
    "relUrl": "/docs/DeliverableC/Storage/DataWarehouse.html"
  }
  ,"16": {
    "title": "File Storage",
    "content": "File Storage . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/FileStorage.html",
    "relUrl": "/docs/DeliverableC/Storage/FileStorage.html"
  }
  ,"17": {
    "title": "Grant Management",
    "content": "Grant Management . What is it? A grant is issued by a ministry to fund a specific project or initiative. Grant recipients typically require an application to indicate interest and eligibility, and some level of compliance and reporting. A grant management application is used to organize, possibly publish, prioritize, and process the grant applications received from citizens or businesses. Grants are typically a one-time allocation. . What it is not: This is not the same as capital investment proposals and allocation, though at a very fundamental base layer there are similarities. Capital is typically an allocation of much largers sums. Grants are often one-time. Ongoing and predictable funding should be categorized as financial management. . Keywords: award, scholarship, bursary, grant . Preferred Direction: Aggregate need across Government to survey the potential for a reduction in implementations, and a common toolset. Determine where each implementation is in its lifecycle, place it on a lifecycle spectrum, and target a first replacement with participation from stakeholders with a template. . For discussion: Could we find, or build, an application that was sufficiently configurable to address needs? .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/GrantManagement.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/GrantManagement.html"
  }
  ,"18": {
    "title": "Human Resources",
    "content": "Human Resources . Archetype: Human Resources . What is it? A major and extensive category of business processes and supporting tools that facilitate human resources functions such as management of employee personnel records, staff acquisition, discipline, benefits, and retirement, also time &amp; attendance, resource planning and allocation, skills management, and team &amp; organizational management. Most ministries have an internal HR function. . Keywords: hiring, staffing, retention, job description, benefits, time and leave, recruitment, performance evaluation . What it is not: Learning management has been defined as a separate category and is not currently considered in the scope of HR for this exercise. The Public Service Agency (PSA) is the central body responsible for human resources management. Not all PSA applications are necessarily HR applications. Management of contractors is not considered HR. Also, contract management is its own category, not in scope here. . Examples: Oracle Human Capital Management (HCM), Oracle PeopleSoft, SAP, KRONOS . Preferred direction: Examine the feasibility of decomposing the mega-vendor suite and its feature-set to accommodate a more flexible, modular approach to the larger set of HR capabilities. This would emphasize the critical nature of integrations. . For Discussion: Is status quo satisfactory? Decentralization seems consistent with many other corporate capabilities. Is that a conscious strategy, or an evolution? .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/HR.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/HR.html"
  }
  ,"19": {
    "title": "HostingPlatform",
    "content": "How and Where to host a Modern application? . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/HostingPlatform.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/HostingPlatform.html"
  }
  ,"20": {
    "title": "How to Refactor your Application?",
    "content": "How to Refactor your Application? . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Refactor.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Refactor.html"
  }
  ,"21": {
    "title": "How to Rehost your Application?",
    "content": "How to Rehost your Application? . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Rehost.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Rehost.html"
  }
  ,"22": {
    "title": "How to Replatform your Application?",
    "content": "How to Replatform your Application? . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Replatform.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Replatform.html"
  }
  ,"23": {
    "title": "How to Repurchase an application?",
    "content": "How to Repurchase an application? . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Repurchase.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Repurchase.html"
  }
  ,"24": {
    "title": "When and How to Retain your Application?",
    "content": "When and How to Retain your Application? . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Retain.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Retain.html"
  }
  ,"25": {
    "title": "When and How to Retire your Application?",
    "content": "When and How to Retire your Application? . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Retire.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/How-to-Retire.html"
  }
  ,"26": {
    "title": "How-to-Guides",
    "content": "How to Guides .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-guides.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-guides.html"
  }
  ,"27": {
    "title": "Introduction",
    "content": "Introduction to a Modern Application . Application Development has evolved greatly over the years. A true modern application is developer oriented, decoupled, reliable, highly available, secure and scalable, and should obey the Cloud Native or 12 factor application principles (see also, Cloud Native Principles). . An application is said to be developer-oriented if the developer is not bound by infrastructure requirements. The developers should be able to develop code and run a single command in his local environment which runs tests, and brings up the application with the current changes, including the connections to the other components such as storage and the database. Within this system, setting up development environments with significant effort to run the application and all supporting components, are considered as a hindrance to productivity. The developer environment should also be as close to the actual environment (Production Environment) as it can be for earlier detection of possible bugs and defects. . An application should be loosely coupled or decoupled into multiple microservices which communicate with each other using RESTful APIs. The application should also support multiple clients and should not be dependent on what UI the client uses or on the number of clients consuming its data and services. Decoupling the applications allows developers to work with smaller pieces and smaller code bases thereby reducing complexity and making it easier to push changes, add innovation, design, secure, manage and maintain each component. . A modern application should be highly-available and reliable. High Availability is measured as the amount of time the application is up and available to serve requests to the end users. Most modern applications have an availability of 99.9999% (also known as 4 9s) which mean that the application can be down for around 31s in a year. . A modern application is secure. It doesnt store credentials in the code base. All required credentials are stored in a secured location such as vaults and are fetched during run time. The system also makes it unneccessary for developers to know credentials and trusts the automation to fetch it correctly. The application is hosted on a secure infrastructure which opens access only to necessary ports and serves applications via HTTPs. All connections within the application components and outside are secure and encrypted. It obeys the ZERO TRUST policy and denies all connectivity at first and authentication and authorization is required to gain the necessary access. . A modern application is also scalable. The application utilizes resources based on demand. .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/Introduction.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/Introduction.html"
  }
  ,"28": {
    "title": "Learning Management System",
    "content": "Learning Management System . What is it? A learning management system (LMS) is a software application for the administration, documentation, tracking, reporting, and delivery of educational courses, training programs, or learning and development programs. . Keywords: LMS, training, professional development. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/Learning.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/Learning.html"
  }
  ,"29": {
    "title": "License Management System",
    "content": "License Management System . What is it? A licensing management system is used to grant or revoke licenses or permits issued by a governing body. . Keywords: license, permit, etc .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/Licensing.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/Licensing.html"
  }
  ,"30": {
    "title": "Lift and Shift Strategies",
    "content": "A guide to lifting and shifting your Legacy Application to Cloud . Cloud provides you with an excting range of opportunities to add innovation to your application using which you can provide better service to your end users. From being able to make changes faster to not being responsible for managing the infrastructure, Cloud would definitely add value and increase agility. . Before you move to the cloud, it is important to understand the definition of a legacy application. . A legacy application is monolithic or has several components tied within a single unit. | A legacy application can have multiple dependencies on other applications or data components, thereby making changes are highly complicated | A legacy application could either be hosted on an on prem datacenter or on a single physical server behind someones desk. | A legacy application could also be hosted on a virtual machine in an on prem cloud but is significantly old, out of date and out of warranty. | A legacy application cannot be dynamically changed, it might take months of effort to make a small change and might be cost intensive. | If you need to think twice before you push a new feature or change, notify your end users the application will be going down more frequently than 30s yearly, and falls under any of the above mentioned category, it can be classified as a legacy application. | . Strategies for lifting and shifting . When you decide to move your legacy application to the cloud, there are 6 strategies you can adopt, that are also knows as Gartners 6R’s. . Rehosting or Lift and Shift: In this approach, you would typically run your application on the cloud making minimal changes. You might even choose to leave your database behind in the interest of not making changes to your application. Once your application is running on the cloud platform of your choice, you will then work on optimizing your application. . Replatforming: If you are adopting this approach, you would need to make some changes to your application in order to take advantage of equivalent services offered on the cloud. You will first be required to evaluate the different cloud services and change your application and database components to suit the needs of the services that you choose to replatform. . Repurchasing: This approach is applicable when you want to move to SaaS. You have an in-house application, but you decide, there is better equivalent in the market. You can purchase and use this product, without needing to host it on your infrastructure, thereby saving costs and other resources. . Refactoring/Rearchitecting: This approach can be adopted when you want to go towards microservice oriented architecture or even serverless. You will need to decouple and rewrite your applications, write APIs, rearchitect your application and infrastructure and then integrate the changes into cloud. This might have high initial costs, but will prove to be the most benefitial approach in the long run. . Retiring: When you are thinking of moving to the cloud, it is important to ask the question, do I really need this application any longer. It might be time for you to determine and analyze, if there are other newer applications that render similar functionality and also determine how often and how many people actually access the application. If the application is being hardly used by 1 or 2 users in a week and a change is made to it once in a year, that application can be got rid off instead of wasting cost and effort required to host in on cloud. . Retaining: You will use this approach when you might have recently spend cost and time to upgrade your application but you are not inclined towards moving it to cloud right away. You cn then choose to retain the application as it is in the current infrastructure and state. .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/LiftandShiftStrategies.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/LiftandShiftStrategies.html"
  }
  ,"31": {
    "title": "Logging and Monitoring",
    "content": "Staying Connected to your Modern Application after deployment . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/LoggingandMonitoring.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/LoggingandMonitoring.html"
  }
  ,"32": {
    "title": "Data Store",
    "content": "Data Store . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/LogicalStorage.html",
    "relUrl": "/docs/DeliverableC/Storage/LogicalStorage.html"
  }
  ,"33": {
    "title": "Mapping",
    "content": "Mapping . What is it? A mapping system is used to capture, store, manipulate, analyze, manage, and present spatial or geographic data. . Keywords: mapping, geographic information system (GIS), spatial, etc. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/Mapping.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/Mapping.html"
  }
  ,"34": {
    "title": "NoSQL Database",
    "content": "NoSQL Database . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/NoSQLDatabase.html",
    "relUrl": "/docs/DeliverableC/Storage/NoSQLDatabase.html"
  }
  ,"35": {
    "title": "Notification",
    "content": "Notification . What is it? A notification system describes a “fire and forget” approach to communicating a time-sensitive communication. .",
    "url": "http://localhost:4000/docs/DeliverableC/System%20Applications/Notification.html",
    "relUrl": "/docs/DeliverableC/System%20Applications/Notification.html"
  }
  ,"36": {
    "title": "Object Storage",
    "content": "Object Storage . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/ObjectStorage.html",
    "relUrl": "/docs/DeliverableC/Storage/ObjectStorage.html"
  }
  ,"37": {
    "title": "Online Disputes",
    "content": "Online Disputes . What is it? Online dispute resolution uses technology to facilitate the resolution of disputes between parties. It primarily involves negotiation, mediation or arbitration, or a combination of all three. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/Onlinedisputes.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/Onlinedisputes.html"
  }
  ,"38": {
    "title": "Payment",
    "content": "Payment . What is it? A payment system is any system used to settle financial transactions through the transfer of monetary value. This includes the institutions, instruments, people, rules, procedures, standards, and technologies that make its exchange possible. Payment systems include credit mechanisms. . Keywords: Bank, credit card, debit. . What is it not? Payment processing is largely centralized via Provincial Treasury (MFIN), which provides cash management, bank payment processing, revenue consolidation and electronic banking services to ministries, Crown corporations and public sector agencies. Ministry-specific funding to stakeholders should be categorized as financial management. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/Payment.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/Payment.html"
  }
  ,"39": {
    "title": "Physical Servers",
    "content": "Physical Servers . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Compute/PhysicalServers.html",
    "relUrl": "/docs/DeliverableC/Compute/PhysicalServers.html"
  }
  ,"40": {
    "title": "Physical Storage",
    "content": "Physical Storage . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/PhysicalStorage.html",
    "relUrl": "/docs/DeliverableC/Storage/PhysicalStorage.html"
  }
  ,"41": {
    "title": "Portfolio Management",
    "content": "Portfolio Management . What is it? A portfolio management system supports the management of planned initiatives, projects, and ongoing IT services such as application support. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/PortfolioManagement.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/PortfolioManagement.html"
  }
  ,"42": {
    "title": "Productivity Applications",
    "content": "Productivity Applications .",
    "url": "http://localhost:4000/docs/DeliverableC/Productivity%20Applications/ProductivityApplications.html",
    "relUrl": "/docs/DeliverableC/Productivity%20Applications/ProductivityApplications.html"
  }
  ,"43": {
    "title": "Registry",
    "content": "Registry . What is it? A registry is an authoritative list of all the official records where a public body serves as the system of record. . Examples: Examples of registries include land titles, individuals (via Provincial Health Number (PHN), Personal Education Number (PEN), etc.), businesses, property, vehicles, etc. In this context, a registry includes not only the data store itself, but any interfaces used to Create, Read, Update, or Delete (CRUD) entries in the registry. . What is it not? A registry requires persistence, typically in the form of a database. But not all databases are registries. Typically, a registry will assign a unique identifier to whatever is being tracked. Records in a registry are mutable and may undergo state transition, as opposed to immutable or transactional records in a transitory database system. A key differentiator is the scope of the data being persisted. The loss of a land title registry, for example, has very serious implications. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/Registry.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/Registry.html"
  }
  ,"44": {
    "title": "Relational Database",
    "content": "Relational Database . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/RelationalDatabase.html",
    "relUrl": "/docs/DeliverableC/Storage/RelationalDatabase.html"
  }
  ,"45": {
    "title": "Reporting",
    "content": "Reporting . What is it? A reporting system is used to organize data into informational summaries to measure performance according to pre-defined criteria. . Keywords: metrics, extract, Jasper, reporting, etc. . What is it not: Reporting is not the same as analytics. Reporting raises questions, analytics attempts to answer them. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/Reporting.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/Reporting.html"
  }
  ,"46": {
    "title": "Security",
    "content": "Securing the Modern Application Infrastructure . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/Security.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/Security.html"
  }
  ,"47": {
    "title": "Serverless Compute",
    "content": "Serverless Compute . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Compute/Serverless.html",
    "relUrl": "/docs/DeliverableC/Compute/Serverless.html"
  }
  ,"48": {
    "title": "Service Management",
    "content": "Service Management . What is it? IT service management (ITSM) refers to the entirety of activities – directed by policies, organized and structured in processes and supporting procedures – that are performed by an organization to design, plan, deliver, operate and control information technology services. . Keywords: help desk, change management, incident management, problem management, release management, etc .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/ServiceManagement.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/ServiceManagement.html"
  }
  ,"49": {
    "title": "Start Thinking Serverless",
    "content": "How to go serverless . You can adopt any of the given three strategies when you are thinking of migrating to a serverless architecture. . Leapfrog: While using this strategy, you skip any iterim steps and directly migrate your applications from legacy infrastructure to serverless cloud. | Considerations: There will be significant application rewrites involved in this process. You will need to make your application event-driven and experiment how it would work with serverless eventdriven functions. Your applications are recommended to be asynchronous and should adhere with the cloud native 12 factors. This strategy is recommended for developers with expertise in using serverless functions. . Organic: With this approach you gradually lift and shift your application to Cloud. You can keep your existing applications intact by moving them to virtual machines or with possible minimal rewrites to containers. While adopting this strategy, the developers would have the liberty to experiment low risk scenarios such a batch jobs, cron jobs or log processing using serverless functions and then move towards experimenting parallel jobs and data transformations using event-driven solutions. | Considerations: While adopting this strategy, you can introspect on how serverless and microservice architecture will help transform your business by inducing agility, innovation and reducing total cost of ownership. By lifting and shifting one application and moving a low risk production workload to serverless cloud, you can pave way to automate this process and apply the lessons learned to further applications. . Strangler: Using this approach, you would decompose all your monolithic applications incrementally by creating APIs and building event-driven components that gradually replace components of the legacy application. You can build API endpoints to point to old and new components to maintain a safe balance and ensure you are full ready and risk free before you can fully adopt serverless solutions. | Considerations: While adopting this strategy, you need to analyse the application and it components and then decouple the applications into microservices. Along with microservices, strangle your data, define the data distribution and design how data will be stored. Then, you will need to decide how each application and data store component will scale independently based on demand. Schedule based tasks/cron jobs are excellent candidates for implementation using serverless functions. During this process, you can also decide how to refactor and enhance your application functionality without affecting the current implementation. This is most commonly adopted pattern while moving to serverless architecture. . ## Cost Considerations . While migrating your applications to serverless, it is important to consider the following: . Compare the infrastructure cost to run your workload on serverless compute as well as running it on containers or server based systems. | Estimate the costs for development efforts i.e., to plan, architect and provision resources. | Costs to maintain the application on server based systems, containers and on serverless cloud. |",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/StartThinkingServerless.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/How-to-Guides/StartThinkingServerless.html"
  }
  ,"50": {
    "title": "Storage",
    "content": "Storage .",
    "url": "http://localhost:4000/docs/DeliverableC/Storage/Storage.html",
    "relUrl": "/docs/DeliverableC/Storage/Storage.html"
  }
  ,"51": {
    "title": "Survey",
    "content": "Survey . What is this? A survey is a list of questions aimed at extracting specific data from a particular group of people. .",
    "url": "http://localhost:4000/docs/DeliverableC/Business%20Applications/Survey.html",
    "relUrl": "/docs/DeliverableC/Business%20Applications/Survey.html"
  }
  ,"52": {
    "title": "System Applications",
    "content": "System Applications .",
    "url": "http://localhost:4000/docs/DeliverableC/System%20Applications/SystemApplications.html",
    "relUrl": "/docs/DeliverableC/System%20Applications/SystemApplications.html"
  }
  ,"53": {
    "title": "Test Driven Development",
    "content": "Testing your code the right way . *** Work in Progress *** .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/Testing.html",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/Testing.html"
  }
  ,"54": {
    "title": "Virtual Machines",
    "content": "Virtual Machines . **** Work in Progress ****** .",
    "url": "http://localhost:4000/docs/DeliverableC/Compute/VirtualMachines.html",
    "relUrl": "/docs/DeliverableC/Compute/VirtualMachines.html"
  }
  ,"55": {
    "title": "A to Z of a Modern Application",
    "content": "A to Z of a Modern Application .",
    "url": "http://localhost:4000/docs/Web%20Application%20Tools%20and%20Tactics/",
    "relUrl": "/docs/Web%20Application%20Tools%20and%20Tactics/"
  }
  ,"56": {
    "title": "C. Modernization Playbook",
    "content": "C. Modernization Playbook . Introduction – Digital Enterprise Architecture . Architecture can be described as the decisions that are required to be made up front that have a significant impact on the long-term success of any given undertaking. . In the technology and business landscape there are typically 5 layers of architecture. . Enterprise: Enterprise Architecture is concerned with the holistic organization or system, as in all associated things, and is typically aimed at achieving alignment… aka ensuring local optimization in one part of the system is not contributing to less than ideal outcomes overall. . Business: Business Architecture is concerned with the people, processes and technology required to usefully run a program or line of business. . Solution: Solution Architecture is concerned with a business solution and the optimal selection and integration of components to most effectively and efficiently meet the business need. These components are made up of software, compute and storage. . Application &amp; Data: Application Architecture is concerned with the best way to engineer software to ensure it’s highly useable, resilient and will have longevity. Data architecture has the same aims but specifically with respect to structured data. . Technical: While both solution and application and data architecture, could be considered technical in nature, by Technical Architecture we mean being dedicated to discussion and comparison of technical protocols and standards such as those that enable technologies such as the internet, voice over IP and other foundational pieces of technology to operate. . In this context Solution Architecture is the intermediary between the business and applications so it makes sense as the starting place for us in the context of the Hosting and Application Development Framework, as we attempt to reduce existing technical barriers to amazing services for citizens and businesses (and public servants too) in BC. . Solution Architecture . Solutions are typically created through the orchestration of 3 main building blocks or components: software (applications), compute and storage (hosting). In 2020 each of these categories breaks into a myriad of categories, representing numerous multitudes of options and approaches, with overlapping definitions, pros and cons - and there’s new variants emerging everyday! . Having a basic hierarchy and taxonomy of these components help us keep track of new and emerging opportunities for creating solutions to support awesome modern service experiences and exceptional outcomes. . Software . Productivity Applications . Office 365 | Skype | . Business Applications (Service Capabilities) . Client Relationship Management | Case Management | Financial Management | Human Resource | Payment | Grant Management | Call Centre Software | Business Intelligence &amp; Analytics | Survey | Learning | Service Management | Licencing | Online Dispute Resolution | Portfolio Management | Other | Inventory Management | Content Management | Mapping | Registry | Contract Mgmt | Reporting | Online Application | . System Applications (Technical Capabilities) . DBMS | middleware | Search | Notification | Integration | Accessibility | Access Mgmt | Bulk Email | . Compute . Physical | Virtual | Containers | Serverless | . Storage . Unstructured | Structured | .",
    "url": "http://localhost:4000/docs/DeliverableC/",
    "relUrl": "/docs/DeliverableC/"
  }
  ,"57": {
    "title": "Hosting and Application Development Framework",
    "content": "Hosting and Application Development Framework . The Government of British Columbia is creating a Hosting and Application Development Framework to accelerate digital change across government. This work supports BC’s Digital Framework and is intended to help government embrace modern technology to better serve British Columbians. . The Framework below is an alpha version (https://developer.gov.bc.ca/Agile-Delivery-Journey/Alpha). It is envisioned as a government-wide approach to modernize hosting and the ways that government develops and delivers applications for digital services. It has been modeled on best practices from around the world while aligning with government’s current IT footprint. . We would love your feedback! . We are seeking feedback on the Hosting and Application Development Framework. The intent in disseminating an alpha version of the Framework is to socialize it and iterate on it with the #DigitalBC community, both within government and in the broader technology ecosystem. | We are particularly interested in hearing from people with previous experience implementing a similar framework. We welcome comments on the approach, order of work and if anything is missing or general recommendations. | We are also very interested in hearing from business leads and technologists within government. This Framework will guide government’s direction regarding strategic infrastructure development, as established by the Government CIO (authority is set out in Section 12.2.2 of the Core Policy and Procedures Manual). | This alpha Framework has been developed by a team within the Office of the Government CIO, in the Ministry of Citizen Services. Executive Director Mac Campbell is our Product Champion. You can contribute directly to this repository or email CITZAS@gov.bc.ca. | . Context . The Government of British Columbia has made strong commitments to restoring public services and making opportunities available to everyone. In support of this commitment, public servants across government are working to deliver excellent digital services that are simple, modern and focused on user needs. . Governments like ours clearly have opportunities to make better use of technology to serve people in ways that are open, collaborative and user-centric. But many organizations, including governments, struggle to keep up with changing service expectations. . That’s why we have adopted BC’s Digital Framework. The Digital Framework drives a coordinated, intentional approach to transitioning into a digital government that meets the internet-era needs and expectations of British Columbians. A key action in the Digital Framework is a new Hosting and Application Development Framework (HADF) to assist ministry decision-making, including for the future of 1600 legacy applications. HADF will support a shift in the digital delivery model over the next three years, during which time the current outsourcing of data centre and managed services will be up for renewal. . Purpose . The purpose of the Hosting and Application Development Framework (HADF) is to: . Understand government’s future state IT needs, new services and digital platforms available to us, and opportunities for future IM/IT service delivery | Inform future procurements to ease our transition to a more digital government | . Additional goals include: . A plan to modernize and improve government-wide approaches and tools for hosting and managing applications and providing services | An integrated strategy will ensure that learning is shared between groups and not run on a project by project basis | A common framework for decision making such that decisions across government are consistent and allow for economies of scale, shared learning, and greater degrees of resource compatibility | A common forum to raise issues, create transparency around shared challenges and ensure consistent performance management of teams, vendors and software | Playbooks consisting of reference architectures, patterns, and other guidance instruments | . Problems we are trying to solve . Client Ministries are seeking modern services from the OCIO . Through recent user research on cloud, Ministries expressed interest in an improved OCIO service model for hosting | Clear policies and guidelines, enterprise-level agreements, predictable timelines and easy-to-access solutions | Ministries are seeking alternatives to the current model but are unsure of options and burdened with the current state | . Ministries and partners would benefit from a clear government-wide strategy . There are currently approximately 1600 applications in the data centres | Opportunities to provide pathways to modernize and improve government-wide approaches and tools for hosting, managing applications and providing services | Lift-and-shift strategies to cloud have not generally been successful; we need a better approach | . Modern hosting would support and accelerate the Digital Framework . Work aligns closely with our commitment to being digital inside | Consistent with our Digital Principles and expected updates to Chapter 12 | Gartner predicts that by 2025, 80% of enterprises will shut down their traditional data centers | Potential opportunities to leverage modern hosting to improve costing and elasticity | . Deliverables . The scope of the Framework includes a package of five key deliverables: . . A: Hosting and Application Development Strategy The strategy will inform the future direction of managed hosting and data centre services for government as well as application development and software services. . Align with key government initiatives and mandates | Provide an overview of the evolution of hosting, data centre services and application development | Chart the future direction of hosting and application development | . B: Framework &amp; Application Portfolio Summary The summary will outline the current state of government’s 1600+ application portfolio. . What can we summarize about our current portfolio? | How many are custom built vs COTS or SAAS? | What is the average amount of time since the last minor and major releases of the custom-built applications? | What are the underlying technologies and is support available? | Are there specific types or classes of applications? | . C: Playbook for Modern Application Architecture The playbook will provide guidance on adoption strategies, efficiencies, and implementation. . Adoption strategies – 6Rs (rehost, replatform, repurchase, refactor, retire, and retain) | Lessons learned and key success factors | Analysis of 6Rs against common application archetypes | Resources (e.g. standards, other supports in government) | Cost analysis guidance | . D: Future State Blueprint The blueprint will propose a reference architecture and measurable use cases delivering high business impact. Connected is the Common Components Program Framework. This will need community participation and executive governance. . Assess capabilities that the government owns today | Assist in identifying leading technologies as part of a portfolio of common components | Support alignment between business units | Present best practices from leading governments | Inform interfaces between legacy and new systems | . E: Policy Will review policy instruments and principles influencing the Framework and co-create new ones where required. . Digital Policy Framework CCPM Chapter 12 | Managing Government Information Policy (in development) | Appropriate Use Policy (being updated) | . | Information Security Policy and Guidelines | CPPM Chapter 6, Procurement (in development) | Standards of Conduct | Various technical and security standards administered by the OCIO (over 40+ standards) | Digital Principles | Ten Principles of Privacy Protection | . We want to hear from you. . What are your thoughts on these deliverables? Are we missing any key themes? Any other deliverable we should be thinking of? . Leave comments on this repository or email CITZAS@gov.bc.ca .",
    "url": "http://localhost:4000/docs/",
    "relUrl": "/docs/"
  }
  ,"58": {
    "title": "",
    "content": "What is this? . Here you will find high-level types of applications or systems deployed in Government. We have taken the liberty of providing here a first-cut definition of those types for your feedback. The purpose of “typing” our applications is to illustrate potential for re-use across Government. The source for this categorization is information about approximately 1,600 applications held by the Digital Investment office within the OCIO. . For those familiar with capability modeling, the categorizations presented here are very (very) loosely related, but are not intended to present a model of the things that Government must do well to be effective. That is another exercise. .",
    "url": "http://localhost:4000/docs/OldeREADME.html",
    "relUrl": "/docs/OldeREADME.html"
  }
  ,"59": {
    "title": "",
    "content": "#Deliverable B sdss .",
    "url": "http://localhost:4000/docs/Testcontent.html",
    "relUrl": "/docs/Testcontent.html"
  }
  
}